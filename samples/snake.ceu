emit WINDOW_SET_TITLE("Snake");
emit WINDOW_SET_SIZE(300,300,30,30);

data Direction;
data Direction.Left;
data Direction.Right;
data Direction.Up;
data Direction.Down;

code/await Snake (none) -> (vector[] Point body) -> FOREVER do
    var Point pt = val Point(14,14);
    body = [ pt ];

    code/tight Grow (none) -> none do
        outer.body = outer.body..[outer.body[$outer.body-1]];
        var usize i;
        loop i in [1 <- $outer.body[ do
            var Point pt = outer.body[i-1];
            outer.body[i] = pt;
        end
    end

    code/tight Walk (none) -> none do
        var usize i;
        loop i in [0 -> $outer.body-1[ do
            var Point pt = outer.body[i+1];
            outer.body[i] = pt;
        end
        $outer.body = $outer.body - 1;
    end

    var Direction dir = val Direction.Right();

    par do
        var integer key;
        every (_,key) in KEY_PRESS do
            if      key==KEY_LEFT  and not (dir is Direction.Right) then
                dir = val Direction.Left();
            else/if key==KEY_RIGHT and not (dir is Direction.Left)  then
                dir = val Direction.Right();
            else/if key==KEY_UP    and not (dir is Direction.Down)  then
                dir = val Direction.Up();
            else/if key==KEY_DOWN  and not (dir is Direction.Up)    then
                dir = val Direction.Down();
            end
        end
    with
        every 250ms do
            var Point pt = body[$body-1];
            if dir is Direction.Left then
                pt.x = pt.x - 1;
            else/if dir is Direction.Right then
                pt.x = pt.x + 1;
            else/if dir is Direction.Up then
                pt.y = pt.y - 1;
            else/if dir is Direction.Down then
                pt.y = pt.y + 1;
            end
            body = body..[pt];
            call Walk();
        end
    with
        every FRAMES_REDRAW do
            var usize i;
            loop i in [0 -> $body[ do
                var Point pt = body[i];
                emit GFX_SET_RGB(0xFF,0xFF,0xFF);
                emit GFX_DRAW_PIXEL(pt.x,pt.y);
            end
        end
    end
end

code/await Food (var&? Snake snake) -> (var Point pt) -> FOREVER do
    loop do
        pt = val Point(_rand()%30, _rand()%30);
        var yesno is_over = do
            var usize i;
            loop i in [0 -> $snake!.body[ do
                var Point pt_ = snake!.body[i];
                if pt_.x==pt.x and pt_.y==pt.y then
                    escape yes;
                end
            end
            escape no;
        end;
        if not is_over then
            break;
        end
    end

    every FRAMES_REDRAW do
        emit GFX_SET_RGB(0xFF,0x00,0x00);
        emit GFX_DRAW_PIXEL(pt.x,pt.y);
    end
end

loop do
    emit GFX_SET_RGB(0xFF,0xFF,0xFF);
    emit GFX_SET_FONT("res/tiny.ttf", 10);
    emit GFX_SET_WRITE_CURSOR(1, 0);
    emit GFX_WRITELN("PRESS");
    emit GFX_WRITELN(" ANY ");
    emit GFX_WRITELN(" KEY ");
    await KEY_PRESS;

    emit FRAMES_SET(yes);
    emit FRAMES_SET_CLEAR_RGB(0x00,0x00,0x00);

    var&? Snake snake = spawn Snake();

    pool[] Food foods;
    spawn do
        every 5s do
            spawn Food(&snake) in foods;
        end
    end

    every FRAMES_UPDATE do
        var&? Food food;
        loop food in foods do
            var usize i;
            loop i in [0 -> $snake!.body[ do
                var Point pt = snake!.body[i];
                if pt.x==food!.pt.x and pt.y==food!.pt.y then
                    call snake!.Grow();
                    kill food;
                    break;
                end
            end
        end
    end
end
