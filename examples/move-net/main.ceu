#include "string.ceu"

#define PLAYER 1

//EACH PLAYER INITIATES WITH A DIFFERENT COLOR AND POSITION
#if PLAYER == 1
    #define MAIN_COLOR COLOR_WHITE
    #define INITIAL_POSITION_X -10
    #define INITIAL_POSITION_Y 0
#elif PLAYER == 2
    #define MAIN_COLOR COLOR_GREEN
    #define INITIAL_POSITION_X 10
    #define INITIAL_POSITION_Y 0    
#endif

//CONFIG THE WINDOW
emit WINDOW_SET_SIZE(30*20, 30*20, 30, 30);
emit WINDOW_SET_TITLE("Moving Around Using Network");

//DISPLAY A RECTANGLE ON THE TOP OF THE SCREEN TO INDICATE WHICH PLAYER YOU ARE
emit GRAPHICS_SET_COLOR_NAME(MAIN_COLOR);
emit GRAPHICS_DRAW_RECT(0, 15, 30, 1);

par do
    var integer n;
    var byte&&  buf;

    //WAIT A MESSAGE ARRIVES FROM ALL PEERS, INCLUDING ITSELF
    every (n, buf) in NET_RECEIVE do
        var integer player = 0;
        var integer x = 0;
        var integer y = 0;
        var integer xOld = 0;
        var integer yOld = 0;

        {
            //CONVERT A CÃ‰U BYTE VECTOR INTO A C CHAR ARRAY
            const char* strC = @&&buf[0] as _char&&;

            int controller = 0, xSignal = 1, ySignal = 1, xOldSignal = 1, yOldSignal = 1, i;

            //ITERATE OVER THE CHARACTER OF RECEIVED STRING (buf)
            for (i = 0; strC[i] != '\0'; i++){
                //THE RECEIVED STRING CONTAIN INFORMATIONS SEPARATED BY A COMA
                //THE controller VARIABLE INDICATES WHICH INFORMATION WE ARE ACCESSING
                if (strC[i] == ',') {
                    controller = controller + 1;
                } else {
                    if (strC[i] == '-') {
                        //VERIFY WHICH NUMBERS ARE NEGATIVE 
                        if (controller == 1)
                            xSignal = -1;
                        else if (controller == 2)
                            ySignal = -1;
                        else if (controller == 3)
                            xOldSignal = -1;
                        else if (controller == 4)
                            yOldSignal = -1;
                    } else {
                        //CONVERT THE CURRENT CHARACTER TO A NUMBER
                        if (controller == 0)
                            @player = @player*10 + (strC[i] - '0');
                        else if (controller == 1)
                            @x = @x*10 + (strC[i] - '0'); 
                        else if (controller == 2)
                            @y = @y*10 + (strC[i] - '0'); 
                        else if (controller == 3)
                            @xOld = @xOld*10 + (strC[i] - '0'); 
                        else if (controller == 4)
                            @yOld = @yOld*10 + (strC[i] - '0');
                    }
                }      
            }
            
            //APPLY THE NEGATIVE SIGNAL
            @x = xSignal * @x;
            @y = ySignal * @y;
            @xOld = xOldSignal * @xOld;
            @yOld = yOldSignal * @yOld;
        }

        //CLEAN THE OLD POSITION
        emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
        emit GRAPHICS_DRAW_PIXEL(xOld,yOld);

        //DRAW THE PIXEL IN A NEW POSITION
        if player == 1 then
            emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);       
        else/if player == 2 then
            emit GRAPHICS_SET_COLOR_NAME(COLOR_GREEN);    
        end 
        emit GRAPHICS_DRAW_PIXEL(x,y);
    end
with
    var integer nextX = INITIAL_POSITION_X;
    var integer nextY = INITIAL_POSITION_Y;
    var integer currentX = x;
    var integer currentY = y;
    var integer key;

    //DRAW THE PIXEL IN THE INITIAL POSITION
    emit GRAPHICS_DRAW_PIXEL(x,y);

    //EXECUTE ON EVERY KEY PRESS
    every key in KEY_PRESS do
        currentX = x;
        currentY = y;
        
        //MOVE IN FOUR DIRECTIONS
        if key == KEY_LEFT then
            //WINDOW COLLISION WITH LEFT SIDE
            if x > -15 then
                x = x - 1; 
            end
        else/if key == KEY_RIGHT then
            //WINDOW COLLISION WITH RIGHT SIDE
            if x < 14 then
                x = x + 1;
            end
        else/if key == KEY_UP then
            //WINDOW COLLISION WITH TOP SIDE
            if (y < 13) then
                y = y + 1;
            end
        else/if key == KEY_DOWN then
            //WINDOW COLLISION WITH BOTTOM SIDE
            if (y > -14) then
                y = y - 1;
            end
        end

        {
            //GENERATE A STRING TO SEND VIA BROADCAST
            char *send = (char*)malloc(18 * sizeof(char));
            sprintf(send, "%d,%d,%d,%d,%d", @PLAYER, @x, @y, @xOld, @yOld);
        }

        //SEND A STRING VIA BROADCAST
        emit NET_SEND(18, {send}); //0,-00,-00,-00,-00 + \0
    end 
end